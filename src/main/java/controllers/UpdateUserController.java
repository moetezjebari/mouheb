package controllers;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import models.Utilisateur;
import services.UtilisateurService;

import java.util.ArrayList;
import java.util.List;

public class UpdateUserController {

    @FXML
    private TextField TFnom;

    @FXML
    private TextField TFprenom;

    @FXML
    private TextField TFemail;

    @FXML
    private TextField TFtelephone;  // Ajout du champ t√©l√©phone

    @FXML
    private CheckBox chkFreelance;

    @FXML
    private CheckBox chkFormateur;

    @FXML
    private CheckBox chkEmployeur;

    @FXML
    private CheckBox chkAdmin;

    private Utilisateur utilisateur;
    private final UtilisateurService serviceUtilisateur = new UtilisateurService();

    /**
     * üìå Remplit le formulaire avec les donn√©es de l'utilisateur s√©lectionn√© pour modification.
     */
    public void setUtilisateur(Utilisateur user) {
        this.utilisateur = user;
        TFnom.setText(user.getNom());
        TFprenom.setText(user.getPrenom());
        TFemail.setText(user.getEmail());
        TFtelephone.setText(user.getTelephone());  // Remplir le champ t√©l√©phone avec la valeur existante

        // S√©lectionner la case √† cocher correspondant au type de l'utilisateur
        switch (user.getTypeUtilisateur()) {
            case "Freelance":
                chkFreelance.setSelected(true);
                break;
            case "Formateur":
                chkFormateur.setSelected(true);
                break;
            case "Employeur":
                chkEmployeur.setSelected(true);
                break;
            case "Admin":
                chkAdmin.setSelected(true);
                break;
        }
    }

    /**
     * üìå Sauvegarde les modifications apport√©es √† l'utilisateur.
     */
    @FXML
    private void updateUserAction(ActionEvent event) {
        String nom = TFnom.getText().trim();
        String prenom = TFprenom.getText().trim();
        String email = TFemail.getText().trim();
        String telephone = TFtelephone.getText().trim();  // R√©cup√©rer la valeur du t√©l√©phone
        String typeUtilisateur = getSelectedUserType();

        if (typeUtilisateur == null) {
            showAlert("Erreur", "Veuillez s√©lectionner un type d'utilisateur.");
            return;
        }

        // V√©rification des changements
        boolean isUnchanged =
                nom.equals(utilisateur.getNom()) &&
                        prenom.equals(utilisateur.getPrenom()) &&
                        email.equals(utilisateur.getEmail()) &&
                        telephone.equals(utilisateur.getTelephone()) &&  // V√©rifier le t√©l√©phone
                        typeUtilisateur.equals(utilisateur.getTypeUtilisateur());

        if (isUnchanged) {
            showAlert("Aucune modification", "Aucune modification d√©tect√©e !");
            closeWindow();
            return;
        }

        // Validation des donn√©es
        if (!email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
            showAlert("Erreur", "Email invalide !");
            return;
        }

        if (telephone != null && !telephone.matches("\\d{8}")) {  // Validation du t√©l√©phone
            showAlert("Erreur", "Le num√©ro de t√©l√©phone doit contenir 8 chiffres.");
            return;
        }

        // Mettre √† jour les informations de l'utilisateur
        utilisateur.setNom(nom);
        utilisateur.setPrenom(prenom);
        utilisateur.setEmail(email);
        utilisateur.setTelephone(telephone);  // Mettre √† jour le t√©l√©phone
        utilisateur.setTypeUtilisateur(typeUtilisateur);

        // Mettre √† jour l'utilisateur dans le service
        if (serviceUtilisateur.mettreAJourUtilisateur(utilisateur)) {
            showAlert("Succ√®s", "Modification r√©ussie !");
            DashboardController dashboard = DashboardController.getInstance();
            if (dashboard != null) {
                dashboard.refreshUserList();
            }
            closeWindow();
        } else {
            showAlert("Erreur", "√âchec de la mise √† jour.");
        }
    }

    /**
     * üìå R√©cup√®re le type d'utilisateur s√©lectionn√©.
     */
    private String getSelectedUserType() {
        List<String> selectedTypes = new ArrayList<>();
        if (chkFreelance.isSelected()) selectedTypes.add("Freelance");
        if (chkFormateur.isSelected()) selectedTypes.add("Formateur");
        if (chkEmployeur.isSelected()) selectedTypes.add("Employeur");
        if (chkAdmin.isSelected()) selectedTypes.add("Admin");

        return selectedTypes.isEmpty() ? null : String.join(", ", selectedTypes);
    }

    /**
     * üìå Ferme la fen√™tre actuelle.
     */
    private void closeWindow() {
        Stage stage = (Stage) TFnom.getScene().getWindow();
        stage.close();
    }

    /**
     * üìå Affiche une bo√Æte de dialogue avec un message donn√©.
     */
    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
